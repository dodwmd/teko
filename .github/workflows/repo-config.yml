name: Repository Configuration

on:
  push:
    paths:
      - '.github/config.json'
      - '.github/workflows/repo-config.yml'
    branches:
      - master
  workflow_dispatch:

jobs:
  apply-config:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          
      - name: Install dependencies
        run: npm install @octokit/rest

      - name: Apply repository configuration
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const { Octokit } = require('@octokit/rest');
            const octokit = new Octokit({ auth: process.env.GITHUB_TOKEN });
            
            const config = JSON.parse(fs.readFileSync('.github/config.json', 'utf8'));
            const [owner, repo] = process.env.GITHUB_REPOSITORY.split('/');
            
            async function updateRepoSettings() {
              console.log('Updating repository settings...');
              try {
                await octokit.repos.update({
                  owner,
                  repo,
                  name: config.repository.name,
                  description: config.repository.description,
                  homepage: config.repository.homepage,
                  private: config.repository.private,
                  has_issues: config.repository.has_issues,
                  has_projects: config.repository.has_projects,
                  has_wiki: config.repository.has_wiki,
                  has_downloads: config.repository.has_downloads,
                  default_branch: config.repository.default_branch,
                  allow_squash_merge: config.repository.allow_squash_merge,
                  allow_merge_commit: config.repository.allow_merge_commit,
                  allow_rebase_merge: config.repository.allow_rebase_merge,
                  delete_branch_on_merge: config.repository.delete_branch_on_merge
                });
                
                // Update topics
                await octokit.repos.replaceAllTopics({
                  owner,
                  repo,
                  names: config.repository.topics
                });
                
                console.log('Repository settings updated successfully');
              } catch (error) {
                console.error('Error updating repository settings:', error);
              }
            }
            
            async function updateBranchProtectionRules() {
              console.log('Updating branch protection rules...');
              
              for (const rule of config.branch_protection_rules) {
                try {
                  console.log(`Setting protection for branch: ${rule.branch}`);
                  
                  await octokit.repos.updateBranchProtection({
                    owner,
                    repo,
                    branch: rule.branch,
                    required_status_checks: rule.required_status_checks,
                    enforce_admins: rule.enforce_admins,
                    required_pull_request_reviews: rule.required_pull_request_reviews,
                    restrictions: rule.restrictions,
                    required_linear_history: rule.required_linear_history,
                    allow_force_pushes: false,
                    allow_deletions: false,
                    required_conversation_resolution: rule.required_conversation_resolution
                  });
                  
                  console.log(`Protection updated for branch: ${rule.branch}`);
                } catch (error) {
                  console.error(`Error updating protection for branch ${rule.branch}:`, error);
                }
              }
            }
            
            async function main() {
              await updateRepoSettings();
              await updateBranchProtectionRules();
              
              console.log('Repository configuration completed');
            }
            
            main().catch(error => {
              console.error('Error applying configuration:', error);
              process.exit(1);
            });

      - name: Output configuration results
        run: |
          echo "Repository configuration has been applied."
          echo "View the Actions log for detailed information about what changes were made."
